---
openapi: 3.0.2
info:
  title: Todo
  version: 1.0.0
  description: My Todo list API
  contact:
    url: "https://github.com/redhat-appdev-practice"
    email: deven.phillips@redhat.com
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0"
servers:
  - url: "http://{domain}:{port}{base_path}"
    description: "Todo API URL"
    variables:
      base_path:
        enum:
          - /
          - /api/v1
        default: /
      domain:
        enum:
          - localhost
          - todo
          - todo.example.com
        default: localhost
      port:
        enum:
          - '443'
          - '80'
          - '8080'
          - '7080'
        default: '7080'
tags:
  - name: todos
paths:
  /todos:
    summary: Path used to manage the list of todos.
    description: >-
      The REST endpoint/path used to list and create zero or more `Todo` entities.  This path contains a
      `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Todo"
          description: Successful response - returns an array of `Todo` entities.
      operationId: getTodos
      tags:
        - todos
      summary: List All todos
      description: Gets a list of all `Todo` entities.
    post:
      requestBody:
        description: A new `Todo` to be created.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewTodo"
        required: true
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
      operationId: createTodo
      tags:
        - todos
      summary: Create a Todo
      description: Creates a new instance of a `Todo`.
  "/todos/{todoId}":
    summary: Path used to manage a single Todo.
    description: >-
      The REST endpoint/path used to get, update, and delete single instances of an `Todo`.  This path
      contains `GET`, `PUT`, and `DELETE` operations used to perform the get, update, and delete tasks,
      respectively.
    get:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
          description: Successful response - returns a single `Todo`.
      operationId: getTodo
      tags:
        - todos
      summary: Get a Todo
      description: Gets the details of a single instance of a `Todo`.
    put:
      requestBody:
        description: Updated `Todo` information.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Todo"
        required: true
      responses:
        "200":
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
      operationId: updateTodo
      tags:
        - todos
      summary: Update a Todo
      description: Updates an existing `Todo`.
    delete:
      responses:
        "204":
          description: Successful response.
      operationId: deleteTodo
      tags:
        - todos
      summary: Delete a Todo
      description: Deletes an existing `Todo`.
    parameters:
      - name: todoId
        description: A unique identifier for a `Todo`.
        schema:
          format: uuid
          type: string
        in: path
        required: true
components:
  schemas:
    NewTodo:
      title: NewTodo
      description: A Todo list item
      required:
        - title
      type: object
      properties:
        id:
          format: uuid
          type: string
        title:
          type: string
        complete:
          type: boolean
      example:
        id: ec3b48dc-938d-11ea-8877-c7ea413b00cb
        title: Example Todo
        complete: false
    Todo:
      title: Todo
      required:
        - id
        - title
      allOf:
        - $ref: '#/components/schemas/NewTodo'
